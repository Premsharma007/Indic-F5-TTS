import io
import spaces
import torch
import librosa
import warnings
import requests
import tempfile
import numpy as np
import gradio as gr
import soundfile as sf
import time  # ‚¨Ö Added for timing
from transformers import AutoModel

warnings.filterwarnings("ignore", message=".*copying from a non-meta parameter.*")

# Function to load reference audio from URL
def load_audio_from_url(url):
    response = requests.get(url)
    if response.status_code == 200:
        audio_data, sample_rate = sf.read(io.BytesIO(response.content))
        return sample_rate, audio_data
    return None, None

@spaces.GPU
def synthesize_speech(text, ref_audio, ref_text):
    start_time = time.time()

    # Handle missing inputs
    if ref_audio is None or ref_text.strip() == "":
        total_time_str = time.strftime("%H:%M:%S", time.gmtime(time.time() - start_time))
        return (24000, np.zeros(1, dtype=np.float32)), total_time_str

    # Validate ref_audio format
    if isinstance(ref_audio, tuple) and len(ref_audio) == 2:
        sample_rate, audio_data = ref_audio
    else:
        total_time_str = time.strftime("%H:%M:%S", time.gmtime(time.time() - start_time))
        return (24000, np.zeros(1, dtype=np.float32)), total_time_str

    # Save ref audio
    with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_audio:
        sf.write(temp_audio.name, audio_data, samplerate=sample_rate, format='WAV')
        temp_audio.flush()

    # Generate speech
    try:
        audio = model(text, ref_audio_path=temp_audio.name, ref_text=ref_text)
    except Exception as e:
        print(f"Error generating audio: {e}")
        total_time_str = time.strftime("%H:%M:%S", time.gmtime(time.time() - start_time))
        return (24000, np.zeros(1, dtype=np.float32)), total_time_str

    # Normalize
    if audio.dtype == np.int16:
        audio = audio.astype(np.float32) / 32768.0

    total_time_str = time.strftime("%H:%M:%S", time.gmtime(time.time() - start_time))
    return (24000, audio), total_time_str



# Load TTS model
repo_id = "6Morpheus6/IndicF5"
model = AutoModel.from_pretrained(repo_id, trust_remote_code=True)
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print("Device", device)
model = model.to(device)

'''# Example Data (Multiple Examples)
EXAMPLES = [
    {
        "audio_name": "PAN_F (Happy)",
        "audio_url": "https://github.com/AI4Bharat/IndicF5/raw/refs/heads/main/prompts/PAN_F_HAPPY_00002.wav",
        "ref_text": "‡®á‡©±‡®ï ‡®ó‡©ç‡®∞‡®æ‡®π‡®ï ‡®®‡©á ‡®∏‡®æ‡®°‡©Ä ‡®¨‡©á‡®Æ‡®ø‡®∏‡®æ‡®≤ ‡®∏‡©á‡®µ‡®æ ‡®¨‡®æ‡®∞‡©á ‡®¶‡®ø‡®≤‡©ã‡®Ç‡®ó‡®µ‡®æ‡®π‡©Ä ‡®¶‡®ø‡©±‡®§‡©Ä ‡®ú‡®ø‡®∏ ‡®®‡®æ‡®≤ ‡®∏‡®æ‡®®‡©Ç‡©∞ ‡®Ö‡®®‡©∞‡®¶ ‡®Æ‡®π‡®ø‡®∏‡©Ç‡®∏ ‡®π‡©ã‡®á‡®Ü‡•§",
        "synth_text": "‡§Æ‡•à‡§Ç ‡§¨‡§ø‡§®‡§æ ‡§ï‡§ø‡§∏‡•Ä ‡§ö‡§ø‡§Ç‡§§‡§æ ‡§ï‡•á ‡§Ö‡§™‡§®‡•á ‡§¶‡•ã‡§∏‡•ç‡§§‡•ã‡§Ç ‡§ï‡•ã ‡§Ö‡§™‡§®‡•á ‡§ë‡§ü‡•ã‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§è‡§ï‡•ç‡§∏‡§™‡§∞‡•ç‡§ü ‡§ï‡•á ‡§™‡§æ‡§∏ ‡§≠‡•á‡§ú ‡§¶‡•á‡§§‡§æ ‡§π‡•Ç‡§Å ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø ‡§Æ‡•à‡§Ç ‡§ú‡§æ‡§®‡§§‡§æ ‡§π‡•Ç‡§Å ‡§ï‡§ø ‡§µ‡§π ‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§â‡§®‡§ï‡•Ä ‡§∏‡§≠‡•Ä ‡§ú‡§∞‡•Ç‡§∞‡§§‡•ã‡§Ç ‡§™‡§∞ ‡§ñ‡§∞‡§æ ‡§â‡§§‡§∞‡•á‡§ó‡§æ‡•§"
    },
    {
        "audio_name": "TAM_F (Happy)",
        "audio_url": "https://github.com/AI4Bharat/IndicF5/raw/refs/heads/main/prompts/TAM_F_HAPPY_00001.wav",
        "ref_text": "‡Æ®‡Ææ‡Æ©‡Øç ‡Æ®‡ØÜ‡Æ©‡Æö‡Øç‡Æö ‡ÆÆ‡Ææ‡Æ§‡Æø‡Æ∞‡Æø‡ÆØ‡Øá ‡ÆÖ‡ÆÆ‡Øá‡Æö‡Ææ‡Æ©‡Øç‡Æ≤ ‡Æ™‡ØÜ‡Æ∞‡Æø‡ÆØ ‡Æ§‡Æ≥‡Øç‡Æ≥‡ØÅ‡Æ™‡Æü‡Æø ‡Æµ‡Æ®‡Øç‡Æ§‡Æø‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡ØÅ. ‡Æï‡ÆÆ‡Øç‡ÆÆ‡Æø ‡Æï‡Ææ‡Æö‡ØÅ‡Æï‡Øç‡Æï‡Øá ‡ÆÖ‡Æ®‡Øç‡Æ§‡Æ™‡Øç ‡Æ™‡ØÅ‡Æ§‡ØÅ ‡Æö‡Øá‡ÆÆ‡Øç‡Æö‡Æô‡Øç ‡ÆÆ‡Ææ‡Æü‡Æ≤ ‡Æµ‡Ææ‡Æô‡Øç‡Æï‡Æø‡Æü‡Æ≤‡Ææ‡ÆÆ‡Øç.",
        "synth_text": "‡¥≠‡¥ï‡µç‡¥∑‡¥£‡¥§‡µç‡¥§‡¥ø‡¥®‡µç ‡¥∂‡µá‡¥∑‡¥Ç ‡¥§‡µà‡¥∞‡µç ‡¥∏‡¥æ‡¥¶‡¥Ç ‡¥ï‡¥¥‡¥ø‡¥ö‡µç‡¥ö‡¥æ‡µΩ ‡¥í‡¥∞‡µÅ ‡¥â‡¥∑‡¥æ‡¥±‡¥æ‡¥£‡µç!"
    },
    {
        "audio_name": "MAR_F (WIKI)",
        "audio_url": "https://github.com/AI4Bharat/IndicF5/raw/refs/heads/main/prompts/MAR_F_WIKI_00001.wav",
        "ref_text": "‡§¶‡§ø‡§ó‡§Ç‡§§‡§∞‡§æ‡§µ‡•ç‡§¶‡§æ‡§∞‡•á ‡§Ö‡§Ç‡§§‡§∞‡§æ‡§≥ ‡§ï‡§ï‡•ç‡§∑‡•á‡§§‡§≤‡§æ ‡§ï‡§ö‡§∞‡§æ ‡§ö‡§ø‡§®‡•ç‡§π‡§ø‡§§ ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§™‡•ç‡§∞‡§Ø‡§§‡•ç‡§® ‡§ï‡•á‡§≤‡•á ‡§ú‡§æ‡§§ ‡§Ü‡§π‡•á.",
        "synth_text": "‡§™‡•ç‡§∞‡§æ‡§∞‡§Ç‡§≠‡§ø‡§ï ‡§Ö‡§Ç‡§ï‡•Å‡§∞ ‡§õ‡•á‡§¶‡§ï. ‡§Æ‡•Ä ‡§∏‡•ã‡§≤‡§æ‡§™‡•Ç‡§∞ ‡§ú‡§ø‡§≤‡•ç‡§π‡•ç‡§Ø‡§æ‡§§‡•Ä‡§≤ ‡§Æ‡§æ‡§≥‡§∂‡§ø‡§∞‡§∏ ‡§§‡§æ‡§≤‡•Å‡§ï‡•ç‡§Ø‡§æ‡§§‡•Ä‡§≤ ‡§∂‡•á‡§§‡§ï‡§∞‡•Ä ‡§ó‡§£‡§™‡§§ ‡§™‡§æ‡§ü‡•Ä‡§≤ ‡§¨‡•ã‡§≤‡§§‡•ã‡§Ø. ‡§Æ‡§æ‡§ù‡•ç‡§Ø‡§æ ‡§ä‡§∏ ‡§™‡§ø‡§ï‡§æ‡§µ‡§∞ ‡§™‡•ç‡§∞‡§æ‡§∞‡§Ç‡§≠‡§ø‡§ï ‡§Ö‡§Ç‡§ï‡•Å‡§∞ ‡§õ‡•á‡§¶‡§ï ‡§ï‡•Ä‡§° ‡§Ü‡§¢‡§≥‡§§ ‡§Ü‡§π‡•á. ‡§ï‡•ç‡§≤‡•ã‡§∞‡§Å‡§ü‡•ç‡§∞‡§æ‡§®‡§ø‡§≤‡•Ä‡§™‡•ç‡§∞‡•ã‡§≤ (‡§ï‡•ã‡§∞‡§æ‡§ú‡•á‡§®) ‡§µ‡§æ‡§™‡§∞‡§£‡•á ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§Ü‡§π‡•á ‡§ï‡§æ? ‡§§‡•ç‡§Ø‡§æ‡§ö‡•á ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£ ‡§ï‡§ø‡§§‡•Ä ‡§Ö‡§∏‡§æ‡§µ‡•á?"
    },
    {
        "audio_name": "MAR_M (WIKI)",
        "audio_url": "https://github.com/AI4Bharat/IndicF5/raw/refs/heads/main/prompts/MAR_M_WIKI_00001.wav",
        "ref_text": "‡§Ø‡§æ ‡§™‡•ç‡§∞‡§•‡§æ‡§≤‡§æ ‡§è‡§ï‡•ã‡§£‡•Ä‡§∏‡§∂‡•á ‡§™‡§Ç‡§ö‡§æ‡§§‡§∞ ‡§à‡§∏‡§µ‡•Ä ‡§™‡§æ‡§∏‡•Ç‡§® ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§¶‡§Ç‡§° ‡§∏‡§Ç‡§π‡§ø‡§§‡§æ‡§ö‡•Ä ‡§ß‡§æ‡§∞‡§æ ‡§ö‡§æ‡§∞‡§∂‡•á ‡§Ö‡§†‡•ç‡§†‡§æ‡§µ‡•Ä‡§∏ ‡§Ü‡§£‡§ø ‡§ö‡§æ‡§∞‡§∂‡•á ‡§è‡§ï‡•ã‡§£‡§§‡•Ä‡§∏‡§ö‡•ç‡§Ø‡§æ ‡§Ö‡§®‡•ç‡§§‡§∞‡•ç‡§ó‡§§ ‡§®‡§ø‡§∑‡•á‡§ß ‡§ï‡•á‡§≤‡§æ.",
        "synth_text": "‡§ú‡•Ä‡§µ‡§æ‡§£‡•Ç ‡§ï‡§∞‡§™‡§æ. ‡§Æ‡•Ä ‡§Ö‡§π‡§Æ‡§¶‡§®‡§ó‡§∞ ‡§ú‡§ø‡§≤‡•ç‡§π‡•ç‡§Ø‡§æ‡§§‡•Ä‡§≤ ‡§∞‡§æ‡§π‡•Å‡§∞‡•Ä ‡§ó‡§æ‡§µ‡§æ‡§§‡•Ç‡§® ‡§¨‡§æ‡§≥‡§æ‡§∏‡§æ‡§π‡•á‡§¨ ‡§ú‡§æ‡§ß‡§µ ‡§¨‡•ã‡§≤‡§§‡•ã‡§Ø. ‡§Æ‡§æ‡§ù‡•ç‡§Ø‡§æ ‡§°‡§æ‡§≥‡§ø‡§Ç‡§¨ ‡§¨‡§æ‡§ó‡•á‡§§ ‡§ú‡•Ä‡§µ‡§æ‡§£‡•Ç ‡§ï‡§∞‡§™‡§æ ‡§Æ‡•ã‡§†‡•ç‡§Ø‡§æ ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§æ‡§§ ‡§¶‡§ø‡§∏‡§§‡•ã‡§Ø. ‡§∏‡•ç‡§ü‡•ç‡§∞‡•á‡§™‡•ç‡§ü‡•ã‡§∏‡§æ‡§Ø‡§ï‡•ç‡§≤‡§ø‡§® ‡§Ü‡§£‡§ø ‡§ï‡•â‡§™‡§∞ ‡§ë‡§ï‡•ç‡§∏‡§ø‡§ï‡•ç‡§≤‡•ã‡§∞‡§æ‡§à‡§° ‡§´‡§µ‡§æ‡§∞‡§£‡•Ä‡§∏‡§æ‡§†‡•Ä ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£ ‡§ï‡§æ‡§Ø ‡§Ö‡§∏‡§æ‡§µ‡•á?"
    },
    {
        "audio_name": "KAN_F (Happy)",
        "audio_url": "https://github.com/AI4Bharat/IndicF5/raw/refs/heads/main/prompts/KAN_F_HAPPY_00001.wav",
        "ref_text": "‡≤®‡≤Æ‡≥ç‚Äå ‡≤´‡≥ç‡≤∞‡≤ø‡≤ú‡≥ç‡≤ú‡≤≤‡≥ç‡≤≤‡≤ø  ‡≤ï‡≥Ç‡≤≤‡≤ø‡≤Ç‡≤ó‡≥ç‚Äå ‡≤∏‡≤Æ‡≤∏‡≥ç‡≤Ø‡≥Ü ‡≤Ü‡≤ó‡≤ø ‡≤®‡≤æ‡≤®‡≥ç‚Äå ‡≤≠‡≤æ‡≤≥ ‡≤¶‡≤ø‡≤®‡≤¶‡≤ø‡≤Ç‡≤¶ ‡≤í‡≤¶‡≥ç‡≤¶‡≤æ‡≤°‡≥ç‡≤§‡≤ø‡≤¶‡≥ç‡≤¶‡≥Ü, ‡≤Ü‡≤¶‡≥ç‡≤∞‡≥Ü ‡≤Ö‡≤¶‡≥ç‡≤®‡≥Ä‡≤ó ‡≤Æ‡≥Ü‡≤ï‡≤æ‡≤®‡≤ø‡≤ï‡≥ç ‡≤Ü‡≤ó‡≤ø‡≤∞‡≥ã ‡≤®‡≤ø‡≤Æ‡≥ç‚Äå ‡≤∏‡≤π‡≤æ‡≤Ø‡≥ç‡≤¶‡≤ø‡≤Ç‡≤¶ ‡≤¨‡≤ó‡≥Ü‡≤π‡≤∞‡≤ø‡≤∏‡≥ç‡≤ï‡≥ã‡≤¨‡≥ã‡≤¶‡≥Å ‡≤Ö‡≤Ç‡≤§‡≤æ‡≤ó‡≤ø ‡≤®‡≤ø‡≤∞‡≤æ‡≤≥ ‡≤Ü‡≤Ø‡≥ç‡≤§‡≥Å ‡≤®‡≤Ç‡≤ó‡≥Ü.",
        "synth_text": "‡¶ö‡ßá‡¶®‡ßç‡¶®‡¶æ‡¶á‡ßü‡ßá‡¶∞ ‡¶∂‡ßá‡ßü‡¶æ‡¶∞‡ßá‡¶∞ ‡¶Ö‡¶ü‡ßã‡¶∞ ‡¶Ø‡¶æ‡¶§‡ßç‡¶∞‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶ñ‡¶æ‡¶¨‡¶æ‡¶∞ ‡¶≠‡¶æ‡¶ó ‡¶ï‡¶∞‡ßá ‡¶ñ‡¶æ‡¶ì‡ßü‡¶æ‡¶ü‡¶æ ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶Æ‡¶® ‡¶ñ‡ßÅ‡¶¨ ‡¶≠‡¶æ‡¶≤‡ßã ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶è‡¶ï‡¶ü‡¶æ ‡¶¨‡¶ø‡¶∑‡ßü‡•§"
    },
]


# Preload all example audios
for example in EXAMPLES:
    sample_rate, audio_data = load_audio_from_url(example["audio_url"])
    example["sample_rate"] = sample_rate
    example["audio_data"] = audio_data'''


# Define Gradio interface with layout adjustments
with gr.Blocks() as iface:
    gr.Markdown(
        """
        # **Spider„ÄéX„Äè(T2S) Indic_F5 Speech Model - 1.0** 
        
        Generate speech using a reference prompt audio and its corresponding text.
        """
    )
    
    with gr.Row():
        with gr.Column():
            text_input = gr.Textbox(label="Text to Synthesize", placeholder="Enter the text to convert to speech...", lines=3)
            ref_audio_input = gr.Audio(type="numpy", label="Reference Prompt Audio")
            ref_text_input = gr.Textbox(label="Text in Reference Prompt Audio", placeholder="Enter the transcript of the reference audio...", lines=2)
            submit_btn = gr.Button("üé§ Generate Speech", variant="primary")
        
        with gr.Column():
            output_audio = gr.Audio(label="Generated Speech", type="numpy")
            time_taken = gr.Label(label="Total Time Taken (HH:MM:SS)") 

    
    '''# Add multiple examples
    examples = [
        [ex["synth_text"], (ex["sample_rate"], ex["audio_data"]), ex["ref_text"]] for ex in EXAMPLES
    ]
    
    gr.Examples(
        examples=examples,
        inputs=[text_input, ref_audio_input, ref_text_input],
        label="Choose an example:"
    )'''
    theme=gr.themes.Soft()
    submit_btn.click(
    synthesize_speech,
    inputs=[text_input, ref_audio_input, ref_text_input],
    outputs=[output_audio, time_taken] 
)


iface.launch()
